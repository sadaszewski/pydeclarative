```{r}
library(ggplot2)
library(dplyr)
library(tidyr)
```

```{r}
theme_Publication <- function(base_size=14, base_family="sans") {
      library(grid)
      library(ggthemes)
      (theme_foundation(base_size=base_size, base_family=base_family)
       + theme(plot.title = element_text(face = "bold",
                                         size = rel(1.2), hjust = 0.5),
               text = element_text(),
               panel.background = element_rect(colour = NA),
               plot.background = element_rect(colour = NA),
               panel.border = element_rect(colour = NA),
               axis.title = element_text(face = "bold",size = rel(1)),
               axis.title.y = element_text(angle=90,vjust =2),
               axis.title.x = element_text(vjust = -0.2),
               axis.text = element_text(), 
               axis.line.x = element_line(colour="black"),
               axis.line.y = element_line(colour="black"),
               axis.ticks = element_line(),
               panel.grid.major = element_line(colour="#f0f0f0"),
               panel.grid.minor = element_blank(),
               legend.key = element_rect(colour = NA),
               legend.position = "bottom",
               legend.direction = "horizontal",
               legend.key.size= unit(0.2, "cm"),
               legend.margin = unit(0, "cm"),
               legend.title = element_text(face="italic"),
               plot.margin=unit(c(10,5,5,5),"mm"),
               strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
               strip.text = element_text(face="bold")
       ))
      
}

scale_fill_Publication <- function(...){
      library(scales)
      discrete_scale("fill","Publication",manual_pal(values = c("#7fc97f","#a6cee3","#fdb462","#386cb0","#ef3b2c","#fb9a99","#662506","#984ea3","#ffff33")), ...)
      
}

scale_colour_Publication <- function(...){
      library(scales)
      discrete_scale("colour","Publication",manual_pal(values = c("#3f892f","#668ea3","#ad7422","#386cb0","#ef3b2c","#fb9a99","#662506","#984ea3","#ffff33")), ...)
      
}
```

```{r}
df_pydecl <- read.csv('results_pydeclarative.csv')
df_pydecl_dhd <- read.csv('results_pydeclarative_disable_htmldiff.csv')
df_shiny <- read.csv('results_shiny.csv')

df_pydecl$Framework <- 'PyDeclarative'
df_pydecl_dhd$Framework <- 'PyDeclarative (htmldiff disabled)'
df_shiny$Framework <- 'Shiny for Python'
df_shiny <- cbind(X=1:nrow(df_shiny), df_shiny)

df_merged <- rbind(df_pydecl, df_pydecl_dhd, df_shiny)

df_merged$Test <- factor(df_merged$Test, levels=unique(df_merged$Test))

#df_merged <- df_merged %>% pivot_wider(id_cols=Test, names_from=Framework, values_from=Mean)
```
```{r}
#| fig.width: 20
#| fig.height: 10

ggplot(df_merged, aes(y=Framework, x=Mean, fill=Framework)) +
  geom_bar(stat='identity') +
  geom_errorbar(aes(xmin = pmax(0, Mean - 1.96 * Std), xmax = Mean + 1.96 * Std, width=0.5, colour=Framework)) +
  scale_fill_Publication() +
  scale_colour_Publication() +
  geom_vline(xintercept = 7, colour='#00000055', linetype='dashed') +
  facet_wrap(~Test, nrow=12) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        legend.position = "bottom",
        legend.direction = "horizontal") +
  labs(x='Time [ms]')
```

```{r}
# Try to mark individual measurements

#df_pydecl <- read.csv('results_pydeclarative.csv')
#df_pydecl_dhd <- read.csv('results_pydeclarative_disable_htmldiff.csv')
#df_shiny <- read.csv('results_shiny.csv')

#df_pydecl$Framework <- 'PyDeclarative'
#df_pydecl_dhd$Framework <- 'PyDeclarative (htmldiff disabled)'
#df_shiny$Framework <- 'Shiny for Python'
#df_shiny <- cbind(X=1:nrow(df_shiny), df_shiny)

df_merged_indiv <- rbind(df_pydecl, df_pydecl_dhd, df_shiny)

df_merged_indiv$Test <- factor(df_merged_indiv$Test, levels=unique(df_merged_indiv$Test))

df_merged_indiv <- df_merged_indiv %>% separate(All, c('m1', 'm2', 'm3', 'm4', 'm5'), sep=',', convert=T)

df_merged_indiv <- df_merged_indiv %>% pivot_longer(cols=c(m1, m2, m3, m4, m5), names_to='Measurement', values_to='Time')
```

```{r}
#| fig.width: 20
#| fig.height: 10

ggplot(df_merged, aes(x=Mean, y=Framework, fill=Framework)) +
  geom_bar(stat='identity') +
  geom_errorbar(aes(xmin = pmax(0, Mean - 1.96 * Std), xmax = Mean + 1.96 * Std, width=0.5, colour=Framework)) +
  scale_fill_Publication() +
  scale_colour_Publication() +
  geom_vline(xintercept = 7, colour='#00000055', linetype='dashed') +
  geom_point(aes(x=Time, y=Framework, colour=Framework), data=df_merged_indiv) +
  facet_wrap(~Test, nrow=12) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        legend.position = "bottom",
        legend.direction = "horizontal") +
  labs(x='Time [ms]')
```

```{r}
#| fig.width: 20
#| fig.height: 10

# try box plot

ggplot(df_merged_indiv, aes(x=Time, y=Framework, fill=Framework, colour=Framework)) +
  geom_boxplot() +
  scale_fill_Publication() +
  scale_colour_Publication() +
  # geom_vline(xintercept = 7, colour='#00000055', linetype='dashed') +
  facet_wrap(~Test, nrow=12) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        legend.position = "bottom",
        legend.direction = "horizontal") +
  labs(x='Time [ms]')
```